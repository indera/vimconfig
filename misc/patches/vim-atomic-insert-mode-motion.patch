# HG changeset patch
# Parent 691a69ae71349cc2f6bd796055c0c9a759228f81
Make <M-Left> and <M-Right> move the cursor in insert mode without breaking undo

From https://groups.google.com/d/msg/vim_use/klj6nlDOriI/aeNjtWp_U80J
This will allow to use <C-G>U<Left> and <C-G>U<Right> to move the cursor without breaking the undo sequence.
However, a new undo changae will be created if left/right move across lines, so that undo is still workable.

This should fix the problem to undo/redo delimate like plugins (hopefully).

diff --git a/runtime/doc/insert.txt b/runtime/doc/insert.txt
--- a/runtime/doc/insert.txt
+++ b/runtime/doc/insert.txt
@@ -377,6 +377,9 @@
 CTRL-\ CTRL-O	like CTRL-O but don't move the cursor	     *i_CTRL-\_CTRL-O*
 CTRL-L		when 'insertmode' is set: go to Normal mode  *i_CTRL-L*
 CTRL-G u	break undo sequence, start new change	     *i_CTRL-G_u*
+CTRL-G U	don't break undo with next left/right cursor *i_CTRL-G_U*
+		(but only if the cursor stays within same
+		the line)
 -----------------------------------------------------------------------
 
 Note: If the cursor keys take you out of Insert mode, check the 'noesckeys'
diff --git a/src/edit.c b/src/edit.c
--- a/src/edit.c
+++ b/src/edit.c
@@ -196,7 +196,7 @@
 static void internal_format __ARGS((int textwidth, int second_indent, int flags, int format_only, int c));
 static void check_auto_format __ARGS((int));
 static void redo_literal __ARGS((int c));
-static void start_arrow __ARGS((pos_T *end_insert_pos));
+static void start_arrow __ARGS((pos_T *end_insert_pos, int change));
 #ifdef FEAT_SPELL
 static void check_spell_redraw __ARGS((void));
 static void spell_back_to_badword __ARGS((void));
@@ -236,11 +236,11 @@
 #if defined(FEAT_GUI_TABLINE) || defined(PROTO)
 static void ins_tabline __ARGS((int c));
 #endif
-static void ins_left __ARGS((void));
+static void ins_left __ARGS((int change));
 static void ins_home __ARGS((int c));
 static void ins_end __ARGS((int c));
 static void ins_s_left __ARGS((void));
-static void ins_right __ARGS((void));
+static void ins_right __ARGS((int change));
 static void ins_s_right __ARGS((void));
 static void ins_up __ARGS((int startcol));
 static void ins_pageup __ARGS((void));
@@ -292,6 +292,8 @@
 
 static int	did_add_space = FALSE;	/* auto_format() added an extra space
 					   under the cursor */
+static int	stop_sync_undo = FALSE;	/* CTRL-G U prevents syncing undo for
+					   the next left/right cursor */
 
 /*
  * edit(): Start inserting text.
@@ -762,6 +764,11 @@
 	 */
 	if (c != K_CURSORHOLD)
 	    lastc = c;		/* remember the previous char for CTRL-D */
+
+	if (stop_sync_undo == MAYBE)	/* cursor might come next */
+	    stop_sync_undo = TRUE;
+	else
+	    stop_sync_undo = FALSE;	/* sync undo with next char, if needed */
 	do
 	{
 	    c = safe_vgetc();
@@ -1232,7 +1239,7 @@
 	    if (mod_mask & (MOD_MASK_SHIFT|MOD_MASK_CTRL))
 		ins_s_left();
 	    else
-		ins_left();
+		ins_left(stop_sync_undo == FALSE);
 	    break;
 
 	case K_S_LEFT:	/* <S-Left> */
@@ -1244,7 +1251,7 @@
 	    if (mod_mask & (MOD_MASK_SHIFT|MOD_MASK_CTRL))
 		ins_s_right();
 	    else
-		ins_right();
+		ins_right(stop_sync_undo == FALSE);
 	    break;
 
 	case K_S_RIGHT:	/* <S-Right> */
@@ -6735,10 +6742,11 @@
  * For undo/redo it resembles hitting the <ESC> key.
  */
     static void
-start_arrow(end_insert_pos)
+start_arrow(end_insert_pos, change)
     pos_T    *end_insert_pos;	    /* can be NULL */
-{
-    if (!arrow_used)	    /* something has been inserted */
+    int	      change;		    /* if true, start a new change */
+{
+    if (!arrow_used && change)	    /* something has been inserted */
     {
 	AppendToRedobuff(ESC_STR);
 	stop_insert(end_insert_pos, FALSE, FALSE);
@@ -6777,7 +6785,7 @@
 
     spell_bad_len = spell_move_to(curwin, BACKWARD, TRUE, TRUE, NULL);
     if (curwin->w_cursor.col != tpos.col)
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 }
 #endif
 
@@ -8303,6 +8311,12 @@
 		  Insstart = curwin->w_cursor;
 		  break;
 
+	/* CTRL-G U: do not break undo with the next char */
+	case 'U':
+		  /* allow one left/right cursor movement with the next char, without breaking undo */
+		  stop_sync_undo = MAYBE;
+		  break;
+
 	/* Unknown CTRL-G command, reserved for future expansion. */
 	default:  vim_beep();
     }
@@ -9211,7 +9225,7 @@
 	    curbuf = curwin->w_buffer;
 	}
 #endif
-	start_arrow(curwin == old_curwin ? &tpos : NULL);
+	start_arrow(curwin == old_curwin ? &tpos : NULL, TRUE);
 #ifdef FEAT_WINDOWS
 	if (curwin != new_curwin && win_valid(new_curwin))
 	{
@@ -9315,7 +9329,7 @@
 
     if (!equalpos(curwin->w_cursor, tpos))
     {
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 # ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 # endif
@@ -9333,7 +9347,7 @@
 		|| (current_tab != 0 && current_tab != tabpage_index(curtab)))
     {
 	undisplay_dollar();
-	start_arrow(&curwin->w_cursor);
+	start_arrow(&curwin->w_cursor, TRUE);
 # ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 # endif
@@ -9359,7 +9373,7 @@
     tpos = curwin->w_cursor;
     if (gui_do_scroll())
     {
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 # ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 # endif
@@ -9375,7 +9389,7 @@
     tpos = curwin->w_cursor;
     if (gui_do_horiz_scroll(scrollbar_value, FALSE))
     {
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 # ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 # endif
@@ -9384,7 +9398,8 @@
 #endif
 
     static void
-ins_left()
+ins_left(change)
+    int	    change; /* start a new change */
 {
     pos_T	tpos;
 
@@ -9401,7 +9416,15 @@
 	 * break undo.  K_LEFT is inserted in im_correct_cursor(). */
 	if (!im_is_preediting())
 #endif
-	    start_arrow(&tpos);
+	{
+	    start_arrow(&tpos, change);
+	    if (!change)
+	    {
+		AppendCharToRedobuff(Ctrl_G);
+		AppendCharToRedobuff('U');
+		AppendCharToRedobuff(K_LEFT);
+	    }
+	}
 #ifdef FEAT_RIGHTLEFT
 	/* If exit reversed string, position is fixed */
 	if (revins_scol != -1 && (int)curwin->w_cursor.col >= revins_scol)
@@ -9416,13 +9439,15 @@
      */
     else if (vim_strchr(p_ww, '[') != NULL && curwin->w_cursor.lnum > 1)
     {
-	start_arrow(&tpos);
+	/* always break undo when moving upwards/downwards, else undo may break */
+	start_arrow(&tpos, TRUE);
 	--(curwin->w_cursor.lnum);
 	coladvance((colnr_T)MAXCOL);
 	curwin->w_set_curswant = TRUE;	/* so we stay at the end */
     }
     else
 	vim_beep();
+    stop_sync_undo = FALSE;
 }
 
     static void
@@ -9444,7 +9469,7 @@
     curwin->w_cursor.coladd = 0;
 #endif
     curwin->w_curswant = 0;
-    start_arrow(&tpos);
+    start_arrow(&tpos, TRUE);
 }
 
     static void
@@ -9464,7 +9489,7 @@
     coladvance((colnr_T)MAXCOL);
     curwin->w_curswant = MAXCOL;
 
-    start_arrow(&tpos);
+    start_arrow(&tpos, TRUE);
 }
 
     static void
@@ -9477,7 +9502,7 @@
     undisplay_dollar();
     if (curwin->w_cursor.lnum > 1 || curwin->w_cursor.col > 0)
     {
-	start_arrow(&curwin->w_cursor);
+	start_arrow(&curwin->w_cursor, TRUE);
 	(void)bck_word(1L, FALSE, FALSE);
 	curwin->w_set_curswant = TRUE;
     }
@@ -9486,7 +9511,8 @@
 }
 
     static void
-ins_right()
+ins_right(change)
+    int	    change; /* start a new change */
 {
 #ifdef FEAT_FOLDING
     if ((fdo_flags & FDO_HOR) && KeyTyped)
@@ -9499,7 +9525,13 @@
 #endif
 	    )
     {
-	start_arrow(&curwin->w_cursor);
+	start_arrow(&curwin->w_cursor, change);
+	if (!change)
+	    {
+		AppendCharToRedobuff(Ctrl_G);
+		AppendCharToRedobuff('U');
+		AppendCharToRedobuff(K_RIGHT);
+	    }
 	curwin->w_set_curswant = TRUE;
 #ifdef FEAT_VIRTUALEDIT
 	if (virtual_active())
@@ -9526,13 +9558,14 @@
     else if (vim_strchr(p_ww, ']') != NULL
 	    && curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)
     {
-	start_arrow(&curwin->w_cursor);
+	start_arrow(&curwin->w_cursor, TRUE);
 	curwin->w_set_curswant = TRUE;
 	++curwin->w_cursor.lnum;
 	curwin->w_cursor.col = 0;
     }
     else
 	vim_beep();
+    stop_sync_undo = FALSE;
 }
 
     static void
@@ -9546,7 +9579,7 @@
     if (curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count
 	    || gchar_cursor() != NUL)
     {
-	start_arrow(&curwin->w_cursor);
+	start_arrow(&curwin->w_cursor, TRUE);
 	(void)fwd_word(1L, FALSE, 0);
 	curwin->w_set_curswant = TRUE;
     }
@@ -9576,7 +9609,7 @@
 #endif
 		)
 	    redraw_later(VALID);
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 #ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 #endif
@@ -9598,7 +9631,7 @@
 	/* <C-PageUp>: tab page back */
 	if (first_tabpage->tp_next != NULL)
 	{
-	    start_arrow(&curwin->w_cursor);
+	    start_arrow(&curwin->w_cursor, TRUE);
 	    goto_tabpage(-1);
 	}
 	return;
@@ -9608,7 +9641,7 @@
     tpos = curwin->w_cursor;
     if (onepage(BACKWARD, 1L) == OK)
     {
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 #ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 #endif
@@ -9639,7 +9672,7 @@
 #endif
 		)
 	    redraw_later(VALID);
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 #ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 #endif
@@ -9661,7 +9694,7 @@
 	/* <C-PageDown>: tab page forward */
 	if (first_tabpage->tp_next != NULL)
 	{
-	    start_arrow(&curwin->w_cursor);
+	    start_arrow(&curwin->w_cursor, TRUE);
 	    goto_tabpage(0);
 	}
 	return;
@@ -9671,7 +9704,7 @@
     tpos = curwin->w_cursor;
     if (onepage(FORWARD, 1L) == OK)
     {
-	start_arrow(&tpos);
+	start_arrow(&tpos, TRUE);
 #ifdef FEAT_CINDENT
 	can_cindent = TRUE;
 #endif
