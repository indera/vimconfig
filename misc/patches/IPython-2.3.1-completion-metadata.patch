diff --git a/core/completer.py b/core/completer.py
index b1bc646..bac343e 100644
--- a/core/completer.py
+++ b/core/completer.py
@@ -67,6 +67,7 @@ Notes:
 #-----------------------------------------------------------------------------
 
 import __main__
+import exceptions
 import glob
 import inspect
 import itertools
@@ -74,21 +75,79 @@ import keyword
 import os
 import re
 import sys
+import numpy
+import repr as REPR
+try:
+    from inspect import signature
+except ImportError:
+    try:
+        from funcsigs import signature
+    except ImportError:
+        from IPython.utils.signatures import signature
 
 from IPython.config.configurable import Configurable
 from IPython.core.error import TryNext
 from IPython.core.inputsplitter import ESC_MAGIC
 from IPython.utils import generics
-from IPython.utils import io
 from IPython.utils.dir2 import dir2
 from IPython.utils.process import arg_split
-from IPython.utils.py3compat import builtin_mod, string_types
+from IPython.utils.py3compat import builtin_mod, safe_unicode, string_types
 from IPython.utils.traitlets import CBool, Enum
 
 #-----------------------------------------------------------------------------
 # Globals
 #-----------------------------------------------------------------------------
 
+repr_ = REPR.Repr()
+repr_.maxother = 50
+try:
+    import builtins as exceptions
+except ImportError:
+    import exceptions
+EXCEPTIONS = set([e for e in [getattr(exceptions, e) for e in dir(exceptions)]
+                  if type(e) == type and issubclass(e, Exception)])
+
+
+def _hassource(object):
+    """Check if object has source code worth fetching."""
+    if not hasattr(object, '__call__'):
+        return False
+    if inspect.ismodule(object):
+        if hasattr(object, '__file__'):
+            return True
+        return False
+    if inspect.isclass(object):
+        object = sys.modules.get(object.__module__)
+        if hasattr(object, '__file__'):
+            return True
+        return False
+    if inspect.ismethod(object):
+        try:
+            object = object.__func__
+        except AttributeError:
+            object = object.im_func
+    if inspect.isfunction(object):
+        try:
+            object = object.__code__
+        except AttributeError:
+            object = object.func_code
+    if inspect.istraceback(object):
+        object = object.tb_frame
+    if inspect.isframe(object):
+        object = object.f_code
+    if inspect.iscode(object):
+        return True
+    return False
+
+
+def arraystr(a, max_line_width=None, precision=None, suppress_small=None):
+    """Separate values with a comma in array2string."""
+    return numpy.array2string(a, max_line_width,
+                              precision, suppress_small,
+                               separator=', ', prefix="", style=str)\
+            .replace('..., ', 'Ellipsis, ')
+
+
 # Public API
 __all__ = ['Completer','IPCompleter']
 
@@ -97,6 +156,7 @@ if sys.platform == 'win32':
 else:
     PROTECTABLES = ' ()[]{}?=\\|;:\'#*"^&'
 
+
 #-----------------------------------------------------------------------------
 # Main functions and classes
 #-----------------------------------------------------------------------------
@@ -426,6 +486,64 @@ def get__all__entries(obj):
     return [w for w in words if isinstance(w, string_types)]
 
 
+def match_dict_keys(keys, prefix):
+    """Used by dict_key_matches, matching the prefix to a list of keys"""
+    if not prefix:
+        return None, 0, [repr(k) for k in keys
+                      if isinstance(k, (string_types, bytes))]
+    quote_match = re.search('["\']', prefix)
+    quote = quote_match.group()
+    try:
+        prefix_str = eval(prefix + quote, {})
+    except Exception:
+        return None, 0, []
+    
+    token_match = re.search(r'\w*$', prefix, re.UNICODE)
+    token_start = token_match.start()
+    token_prefix = token_match.group()
+
+    # TODO: support bytes in Py3k
+    matched = []
+    for key in keys:
+        try:
+            if not key.startswith(prefix_str):
+                continue
+        except (AttributeError, TypeError, UnicodeError):
+            # Python 3+ TypeError on b'a'.startswith('a') or vice-versa
+            continue
+
+        # reformat remainder of key to begin with prefix
+        rem = key[len(prefix_str):]
+        # force repr wrapped in '
+        rem_repr = repr(rem + '"')
+        if rem_repr.startswith('u') and prefix[0] not in 'uU':
+            # Found key is unicode, but prefix is Py2 string.
+            # Therefore attempt to interpret key as string.
+            try:
+                rem_repr = repr(rem.encode('ascii') + '"')
+            except UnicodeEncodeError:
+                continue
+
+        rem_repr = rem_repr[1 + rem_repr.index("'"):-2]
+        if quote == '"':
+            # The entered prefix is quoted with ",
+            # but the match is quoted with '.
+            # A contained " hence needs escaping for comparison:
+            rem_repr = rem_repr.replace('"', '\\"')
+
+        # then reinsert prefix from start of token
+        matched.append('%s%s' % (token_prefix, rem_repr))
+    return quote, token_start, matched
+
+
+def _safe_isinstance(obj, module, class_name):
+    """Checks if obj is an instance of module.class_name if loaded
+    """
+    return (module in sys.modules and
+            isinstance(obj, getattr(sys.modules[module], class_name)))
+
+
+
 class IPCompleter(Completer):
     """Extension of the completer class with IPython-specific features"""
 
@@ -538,6 +656,7 @@ class IPCompleter(Completer):
                          self.file_matches,
                          self.magic_matches,
                          self.python_func_kw_matches,
+                         self.dict_key_matches,
                          ]
 
     def all_completions(self, text):
@@ -804,6 +923,113 @@ class IPCompleter(Completer):
                     argMatches.append("%s=" %namedArg)
         return argMatches
 
+    def dict_key_matches(self, text):
+        "Match string keys in a dictionary, after e.g. 'foo[' "
+        def get_keys(obj):
+            # Only allow completion for known in-memory dict-like types
+            if isinstance(obj, dict) or\
+               obj is os.environ or\
+               _safe_isinstance(obj, 'attrdict', 'AttrDict') or\
+               _safe_isinstance(obj, 'h5py.highlevel', 'AttributeManager') or\
+               _safe_isinstance(obj, 'h5py.highlevel', 'HLObject') or\
+               _safe_isinstance(obj, 'pandas', 'DataFrame'):
+                try:
+                    return list(obj.keys())
+                except Exception:
+                    return []
+            elif _safe_isinstance(obj, 'numpy', 'ndarray'):
+                return obj.dtype.names or []
+            elif _safe_isinstance(obj, 'numpy.lib.npyio', 'NpzFile'):
+                return obj.files or []
+            return []
+
+        try:
+            regexps = self.__dict_key_regexps
+        except AttributeError:
+            dict_key_re_fmt = r'''(?x)
+            (  # match dict-referring expression wrt greedy setting
+                %s
+            )
+            \[   # open bracket
+            \s*  # and optional whitespace
+            ([uUbB]?  # string prefix (r not handled)
+                (?:   # unclosed string
+                    '(?:[^']|(?<!\\)\\')*
+                |
+                    "(?:[^"]|(?<!\\)\\")*
+                )
+            )?
+            $
+            '''
+            regexps = self.__dict_key_regexps = {
+                False: re.compile(dict_key_re_fmt % '''
+                                  # identifiers separated by .
+                                  (?!\d)\w+
+                                  (?:\.(?!\d)\w+)*
+                                  '''),
+                True: re.compile(dict_key_re_fmt % '''
+                                 [^ =\r\n]+
+                                 ''')
+            }
+
+        match = regexps[self.greedy].search(self.text_until_cursor)
+        if match is None:
+            return []
+
+        expr, prefix = match.groups()
+        try:
+            obj = eval(expr, self.namespace)
+        except Exception:
+            try:
+                obj = eval(expr, self.global_namespace)
+            except Exception:
+                return []
+
+        keys = get_keys(obj)
+        if not keys:
+            return keys
+        closing_quote, token_offset, matches = match_dict_keys(keys, prefix)
+        if not matches:
+            return matches
+        
+        # get the cursor position of
+        # - the text being completed
+        # - the start of the key text
+        # - the start of the completion
+        text_start = len(self.text_until_cursor) - len(text)
+        if prefix:
+            key_start = match.start(2)
+            completion_start = key_start + token_offset
+        else:
+            key_start = completion_start = match.end()
+        
+        # grab the leading prefix, to make sure all completions start with `text`
+        if text_start > key_start:
+            leading = ''
+        else:
+            leading = text[:completion_start-text_start]
+        
+        # the index of the `[` character
+        bracket_idx = match.end(1)
+
+        # append closing quote and bracket as appropriate
+        # this is *not* appropriate if the opening quote or bracket is outside
+        # the text given to this method
+        suf = ''
+        continuation = self.line_buffer[len(self.text_until_cursor):]
+        if key_start > text_start and closing_quote:
+            # quotes were opened inside text, maybe close them
+            if continuation.startswith(closing_quote):
+                continuation = continuation[len(closing_quote):]
+            else:
+                suf += closing_quote
+        if bracket_idx > text_start:
+            # brackets were opened inside text, maybe close them
+            if not continuation.startswith(']'):
+                suf += ']'
+        
+        return [leading + k + suf for k in matches]
+
     def dispatch_custom_completer(self, text):
         #io.rprint("Custom! '%s' %s" % (text, self.custom_completers)) # dbg
         line = self.line_buffer
@@ -901,6 +1127,7 @@ class IPCompleter(Completer):
 
         # Start with a clean slate of completions
         self.matches[:] = []
+        changed_greedy = False
         custom_res = self.dispatch_custom_completer(text)
         if custom_res is not None:
             # did custom completers produce something?
@@ -918,6 +1145,20 @@ class IPCompleter(Completer):
                         # Show the ugly traceback if the matcher causes an
                         # exception, but do NOT crash the kernel!
                         sys.excepthook(*sys.exc_info())
+                if not self.matches and self.splitter.delims == GREEDY_DELIMS:
+                    try:
+                        self._greedy_changed('', True, False)
+                        changed_greedy = True
+                        original_text = text
+                        text = self.splitter.split_line(text, cursor_pos)
+                        if text and not text.endswith(('"', "'")):
+                            for matcher in self.matchers:
+                                try:
+                                    self.matches.extend(matcher(text))
+                                except:
+                                    sys.excepthook(*sys.exc_info())
+                    finally:
+                        self._greedy_changed('', False, True)
             else:
                 for matcher in self.matchers:
                     self.matches = matcher(text)
@@ -931,8 +1172,101 @@ class IPCompleter(Completer):
         # use penalize_magics_key to put magics after variables with same name
         self.matches = sorted(set(self.matches), key=penalize_magics_key)
 
+        def arepr(obj):
+            if not obj.shape:
+                return repr(obj.tolist())
+            return 'x'.join(str(s) for s in obj.shape +
+                            ((0,) if len(obj.shape) == 1 else ()))
+        numpy.set_string_function(arepr)
+        numpy.set_string_function(arepr, repr=False)
+        templates = numpy.ma.core._print_templates
+        numpy.ma.core._print_templates = {k: '%(data)s' for k in templates}
+        numpy.ma.masked_print_option.enable(False)
+
+        matches = []
+        for i, m in enumerate(self.matches):
+            try:
+                obj = eval(m, self.namespace)
+            except Exception:
+                try:
+                    obj = eval(m, self.global_namespace)
+                except Exception:
+                    matches.append(m)
+                    continue
+
+            try:
+                assert(isinstance(obj, numpy.ndarray))
+                if obj.shape:
+                    matches.append(m + '\0ndarray: %s %s' % (str(obj.shape),
+                                                             str(obj.dtype)))
+                else:
+                    matches.append(m + '\0ndarray: %s (%s)' % (str(obj),
+                                                               str(obj.dtype)))
+            except Exception as e:
+                if type(e) in EXCEPTIONS - set(
+                        [AssertionError, AttributeError, NameError]):
+                    raise
+                try:
+                    matches.append(
+                        m + '\0' + '%s: %s' %
+                        (type(obj).__name__,
+                         '.'.join(f for f in [obj.__module__,
+                                              obj.__name__] if f)))
+                except Exception as e:
+                    if type(e) in EXCEPTIONS - set(
+                            [AttributeError, KeyError, TypeError]):
+                        raise
+                    matches.append(m + '\0' + '%s: %s' % (
+                        type(obj).__name__,
+                        repr_.repr_dict(obj, 1)[: 80] if isinstance(obj, dict)
+                        else repr_.repr(obj)[: 80]))
+
+            info = ''
+            if _hassource(obj) or callable(obj):
+                try:
+                    info += obj.__name__ + safe_unicode(signature(obj)) + '\n\n'
+                except Exception as e:
+                    if type(e) in EXCEPTIONS - set(
+                        [AttributeError, KeyError, NameError, TypeError,
+                         ValueError]):
+                        raise
+                    try:
+                        source = safe_unicode(inspect.getsource(obj))
+                    except Exception as e:
+                        if type(e) in EXCEPTIONS - set(
+                                [AttributeError, IOError, TypeError]):
+                            raise
+                    else:
+                        def_ = re.sub(r'\s+', ' ', re.split(
+                            r'\)\s*:\s*\n', source)[0]) + ')\n\n'
+                        if def_.startswith('def '):
+                            info += def_[4:]
+                        elif def_.startswith('class '):
+                            info += def_[6:]
+
+            if callable(obj):
+                try:
+                    info += safe_unicode(inspect.getdoc(obj))
+                except Exception as e:
+                    if type(e) in EXCEPTIONS - set([AttributeError, TypeError]):
+                        raise
+
+            matches[i] = matches[i].replace(
+                'builtin_function_or_method',
+                'builtin') + ('CALLSIG' + info if info else '')
+
+        numpy.set_string_function(None)
+        numpy.set_string_function(arraystr, repr=False)
+        numpy.ma.core._print_templates = templates
+        numpy.ma.masked_print_option.enable()
+
         #io.rprint('COMP TEXT, MATCHES: %r, %r' % (text, self.matches)) # dbg
-        return text, self.matches
+        if changed_greedy:
+            start = original_text[:original_text.rindex(text)]
+            matches = [start + m for m in matches]
+            self.matches = matches
+            text = original_text
+        return text, matches
 
     def rlcomplete(self, text, state):
         """Return the state-th possible completion for 'text'.
diff --git a/utils/dir2.py b/utils/dir2.py
index dd508b4..7d02b38 100644
--- a/utils/dir2.py
+++ b/utils/dir2.py
@@ -13,6 +13,7 @@
 # Imports
 #-----------------------------------------------------------------------------
 from .py3compat import string_types
+import sys
 
 #-----------------------------------------------------------------------------
 # Code
@@ -44,6 +45,13 @@ def get_class_members(cls):
     return ret
 
 
+def _safe_isinstance(obj, module, class_name):
+    """Checks if obj is an instance of module.class_name if loaded
+    """
+    return (module in sys.modules and
+            isinstance(obj, getattr(sys.modules[module], class_name)))
+
+
 def dir2(obj):
     """dir2(obj) -> list of strings
 
@@ -70,6 +78,13 @@ def dir2(obj):
         #words.add('__class__')
         words |= set(get_class_members(obj.__class__))
 
+    if _safe_isinstance(obj, 'bunch', 'Bunch') or\
+            _safe_isinstance(obj, 'attrdict', 'AttrDict'):
+        words = set(obj.keys())
+    elif _safe_isinstance(obj, 'numpy.rec', 'recarray') or\
+            _safe_isinstance(obj, 'numpy.ma.mrecords', 'mrecarray'):
+        words |= set(obj.dtype.names)
+
 
     # for objects with Enthought's traits, add trait_names() list
     # for PyCrust-style, add _getAttributeNames() magic method list
diff --git a/kernel/zmq/ipkernel.py b/kernel/zmq/ipkernel.py
index f76d506..58c8209 100644
--- a/kernel/zmq/ipkernel.py
+++ b/kernel/zmq/ipkernel.py
@@ -477,8 +477,16 @@ class Kernel(Configurable):
 
     def complete_request(self, stream, ident, parent):
         txt, matches = self._complete(parent)
+        metadata = []
+        for i, m in enumerate(matches):
+            if '\0' in m:
+                metadata.append(m.partition('\0')[-1])
+                matches[i] = m.partition('\0')[0]
+            else:
+                metadata.append('')
         matches = {'matches' : matches,
                    'matched_text' : txt,
+                   'metadata' : metadata,
                    'status' : 'ok'}
         matches = json_clean(matches)
         completion_msg = self.session.send(stream, 'complete_reply',
