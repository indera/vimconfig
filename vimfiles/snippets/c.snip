snippet     if
abbr        if () {}
    if (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet else
    else
    {
        ${0:TARGET}
    }

snippet elseif
    else if (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet     ifelse
abbr        if () {} else {}
    if (${1:#:condition})
    {
        ${2:TARGET}
    }
    else
    {
        ${3}
    }

snippet     for
abbr        for () {}
    for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; $2++)
    {
        ${0:#:TARGET}
    }

snippet     while
abbr        while () {}
    while (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet     do_while
alias       do
    do
    {
        ${0:TARGET:code}
    } while (${1:#:condition});

snippet     switch
abbr        switch () {}
	switch (${1:#:var})
	{
		case ${2:#:val}:
			${0:TARGET}
			break;
	}

snippet     function
alias       func
abbr        func() {}
    ${1:void} ${2:#:func_name}(${3:#:args})
    {
        ${0:TARGET}
    }

snippet     struct
abbr        struct {}
    struct ${1:#:name}
    {
        ${0:TARGET:data}
    };

# Typedef struct
snippet struct_typedef
    typedef struct ${1:#:name}
    {
        ${0:TARGET:data}
    };

snippet     enum
abbr        enum {}
    enum ${1:#:name}
    {
        ${0:TARGET}
    };

# hard-tab is necessary; C indent doesn't support this.
snippet main
	int main(int argc, char **argv)
	{
		${0:TARGET}
		return 0;
	}

# Include-Guard
snippet once
abbr include-guard
	#ifndef ${1:SYMBOL}
		#define $1

		${0:TARGET}
	#endif /* end of include guard */

snippet debug
abbr    fprintf(..., "file:ln...\n", ...); /* JAKE DEBUG */
    fprintf(${1:stderr}, "%s:%d ${2}\n", __FILE__, __LINE__${3}); /* JAKE DEBUG */

snippet fopen
abbr fopen("...", "...");
    ${1:FD} = fopen("${2:PATH}", "${3:MODE}");
    if ($1)
    {
        ${0:TARGET}
    }
    else
    {
        fprintf(stderr, "Error opening file: %s\n", "$2");
    }
    fclose($1);

snippet memcpy
    memcpy(${0:dest}, ${1:src}, sizeof($0));

snippet memset
    memset(${0:dest}, ${1:value}, sizeof($0));
