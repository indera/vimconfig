import Control.Applicative
import Control.Monad
import Data.Array
import Data.Either
import Data.Function (on)
import Data.List
import Data.List.Split
import Data.Maybe
import Data.Numbers.Primes
import Data.Ratio
import qualified Data.Map as M
import qualified Data.Set as S

let replace old new = intercalate new . splitOn old

:set prompt "\ESC[34mλ \ESC[m"
:set prompt2 "\ESC[34mλ| \ESC[m"
:def! hoogle \x -> return $ ":!hoogle --info \"" ++ x ++ "\""
:def! doc \x -> return $ ":!hoogle --info \"" ++ x ++ "\""
:def! ghci const (System.Environment.getEnvironment >>= maybe (return "") (readFile . (System.FilePath.</> ".ghci")) . lookup "HOME")
